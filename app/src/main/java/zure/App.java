/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package zure;

import java.sql.Connection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mongodb.client.MongoClient;

import zure.data.SourceType;
import zure.data.TargetData;
import zure.service.FileService;
import zure.service.MongoDbService;
import zure.service.RdbService;

public class App {

    public static void main(String[] args) {
        if (args.length != 2) {
            return;
        }

        // connection系は全部クローズできるようにここで宣言する
        Connection connection = null;
        MongoClient mongoClient = null;
        Map<String, Object> cilent = new HashMap<>();
        cilent.put("connection", connection);
        cilent.put("mongoClient", mongoClient);

        Map<String, Executable> service = new HashMap<>();
        service.put("RdbService", new RdbService());
        service.put("MongoDbService", new MongoDbService());
        service.put("FileService", new FileService());

        try {
            TargetData data_A = Zure.loadDataFromFile(args[0]);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.data_A complete");

            TargetData data_B = Zure.loadDataFromFile(args[1]);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.data_B complete");

            List<String> dataList_A = getDataList(data_A, cilent, service);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.dataList_A complete");

            List<String> dataList_B = getDataList(data_B, cilent, service);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.dataList_B complete");

            if (!isReady(dataList_A, dataList_B)) {
                return;
            }

            Map<String, List<String>> errorInfo = Zure.bulkCheck(dataList_A, dataList_B, data_A.targetColumns,
                    data_B.targetColumns);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.bulkCheck complete");

            // 結果出力(html or log)
            Zure.outputResultFile(errorInfo, dataList_A, dataList_B);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>.outputFile complete");

        } catch (Exception e1) {
            e1.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
                if (mongoClient != null) {
                    mongoClient.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private static boolean isReady(List<String> dataList_A, List<String> dataList_B) {
        return (dataList_A != null && dataList_A.size() > 1) && (dataList_B != null && dataList_B.size() > 1);
    }

    private static List<String> getDataList(TargetData data, Map<String, Object> cilent,
            Map<String, Executable> service) throws Exception {
        if (SourceType.isRDB(data.type)) {
            return service.get("RdbService").execute(cilent.get("connection"), data);
        } else if (SourceType.isNoSQL(data.type)) {
            String label = SourceType.getLabelByType(data.type);
            if ("mongodb".equals(label)) {
                return service.get("MongoDbService").execute(cilent.get("mongoClient"), data);
            } else {
            }
        } else if (SourceType.isFile(data.type)) {
            return service.get("FileService").execute(cilent.get("mongoClient"), data);
        }
        return Collections.emptyList();
    }
}
